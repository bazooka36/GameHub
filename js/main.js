/**
 * –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è GameHub
 * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */

import { Utils } from './utils.js';
import { modalManager } from './modalManager.js';
import { toastManager } from './toastManager.js';

// –ò–º–ø–æ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–æ–Ω–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏)
import { UserManager } from './managers/userManager.js';
import { AuthManager } from './managers/authManager.js';
import { ProfileManager } from './managers/profileManager.js';
import { FriendsManager } from './managers/friendsManager.js';
import { ContentLoader } from './managers/contentLoader.js';
import { GameSearch } from './managers/gameSearch.js';
import { SupportManager } from './managers/supportManager.js';
import { DataManager } from './managers/dataManager.js';
import { GameCarousel } from './managers/gameCarousel.js';

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
class GameHubApp {
    constructor() {
        this.managers = {};
        this.isInitialized = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async init() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GameHub...');

            this.initializeDataManager();
            this.setupGlobalReferences();

            const support = Utils.checkBrowserSupport();
            if (!support.localStorage) {
                this.showBrowserWarning('localStorage –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
            }

            await this.initializeManagers();

            if (typeof modalManager !== 'undefined') {
                modalManager.hideAllModals();
            }

            this.setupEventListeners();
            this.setupNotificationButtons();
            this.setupPasswordVisibilityToggles();
            await this.loadInitialContent();
            this.hideLoadingScreen();
            this.updateUIForUserState();

            this.isInitialized = true;
            console.log('‚úÖ GameHub —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å GameHub:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ' + error.message);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataManager –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ—è –¥–∞–Ω–Ω—ã—Ö
     */
    initializeDataManager() {
        try {
            window.gameHubDataManager = new DataManager();
            // –í—ã–∑–æ–≤ clearTestData() —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –±–æ–ª—å—à–µ –Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
            console.log('‚úÖ DataManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DataManager:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
     */

    async initializeManagers() {
        try {
            this.managers = {
                user: new UserManager(),
                auth: new AuthManager(),
                profile: new ProfileManager(),
                friends: new FriendsManager(),
                content: new ContentLoader(),
                search: new GameSearch(),
                support: new SupportManager(),
                carousel: new GameCarousel(),
            };

            this.setupManagerDependencies();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            for (const manager of Object.values(this.managers)) {
                if (typeof manager.init === 'function') {
                    manager.init();
                }
            }

            this.setupManagersInGlobalScope();

            // –î–µ–ª–∞–µ–º friendsManager –≥–ª–æ–±–∞–ª—å–Ω—ã–º –¥–ª—è onclick
            window.friendsManager = this.managers.friends;

            if (typeof toastManager !== 'undefined') {
                await toastManager.init();
                this.managers.toast = toastManager;
                console.log('‚úÖ ToastManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            console.log('‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–¥–∞–ª–æ–∫ –¥—Ä—É–∑–µ–π
            if (this.managers.friends && typeof this.managers.friends.setupEventListeners === 'function') {
                this.managers.friends.setupEventListeners();
            }
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', error);
            throw error;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
     */
    setupManagerDependencies() {
        this.managers.auth.setUserManager(this.managers.user);
        this.managers.profile.setUserManager(this.managers.user);
        this.managers.friends.setUserManager(this.managers.user);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –º–µ–∂–º–æ–¥—É–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
     */
    setupGlobalReferences() {
        try {
            window.gameHubApp = this;
            if (typeof modalManager !== 'undefined') window.modalManager = modalManager;
            if (typeof toastManager !== 'undefined') window.toastManager = toastManager;
            window.utils = Utils;
            window.managers = {};
            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –∏–º–µ–Ω–∏
     * @param {string} name - –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     * @returns {Object|null} –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    getManager(name) {
        return this.managers[name] || null;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        window.addEventListener('load', () => this.hideLoadingScreen());
        window.addEventListener('beforeunload', () => this.cleanup());

        window.addEventListener('error', (e) => {
            Utils.handleError(e.error, '–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞');
        });

        window.addEventListener('unhandledrejection', (e) => {
            Utils.handleError(e.reason, '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞');
        });

        this.setupNavigationButtons();
        this.setupFooterElements();
        this.setupAuthButtons(); 
        this.setupBurgerMenu();
        this.setupModalCloseButtons();
        this.setupGameSearch(); 
        this.setupSupportForm(); 
        this.setupNotificationButtons(); 

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–π—Ç–∏"
        const logoutButton = document.getElementById('desktop-logout-btn');
        if (logoutButton) {
            logoutButton.addEventListener('click', () => {
                const authManager = this.managers.auth;
                if (authManager && typeof authManager.logout === 'function') {
                    authManager.logout();
                    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã.');
                } else {
                    console.warn('–ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –º–µ—Ç–æ–¥ logout –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
                }
            });
        } else {
            console.warn('–ö–Ω–æ–ø–∫–∞ "–í—ã–π—Ç–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–∞—è'
        const homeBtn = document.getElementById('home-nav-btn');
        if (homeBtn) {
            Utils.addEventListenerSafe(homeBtn, 'click', (e) => {
                e.preventDefault();
                window.scrollTo({ top: 0, behavior: 'smooth' });
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í—Å–µ –∏–≥—Ä—ã'
        const allGamesBtn = document.getElementById('all-games-nav-btn');
        const gamesGridSection = document.getElementById('games-grid-section');
        if (allGamesBtn && gamesGridSection) {
            Utils.addEventListenerSafe(allGamesBtn, 'click', (e) => {
                e.preventDefault();
                gamesGridSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
            });
        }
    }

    setupAuthButtons() {
        const registerButtons = document.querySelectorAll('#desktop-register-btn');
        const loginButtons = document.querySelectorAll('#desktop-login-btn');
        const authModal = document.getElementById('auth-modal');

        if (!authModal) {
            console.error('auth-modal –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registerButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                modalManager.showModal(authModal);
                const registerTab = document.getElementById('show-register');
                if (registerTab) {
                    registerTab.click(); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                } else {
                    console.warn('–í–∫–ª–∞–¥–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
        loginButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                modalManager.showModal(authModal);
                const loginTab = document.getElementById('show-login');
                if (loginTab) {
                    loginTab.click(); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –≤—Ö–æ–¥–∞
                } else {
                    console.warn('–í–∫–ª–∞–¥–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
                }
            });
        });
    }

    setupBurgerMenu() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
        const burgerButton = document.querySelector('.burger-menu-button');
        if (burgerButton) {
            burgerButton.addEventListener('click', () => {
                const burgerMenu = document.querySelector('.burger-menu');
                if (burgerMenu) {
                    burgerMenu.classList.toggle('active');
                    burgerButton.setAttribute('aria-expanded',
                        burgerMenu.classList.contains('active').toString());
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
        const menuItems = document.querySelectorAll('.burger-menu-item');
        menuItems.forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                const action = item.id;
                this.handleBurgerMenuAction(action);

                // –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
                const burgerMenu = document.querySelector('.burger-menu');
                if (burgerMenu) {
                    burgerMenu.classList.remove('active');
                }
            });
        });
    }

    handleBurgerMenuAction(action) {
        switch (action) {
            case 'profile-option':
                this.showModal('profile-modal');
                break;
            case 'friends-option':
                if (this.managers.friends && typeof this.managers.friends.showFriendsModal === 'function') {
                    this.managers.friends.showFriendsModal();
                } else {
                    this.showModal('friends-modal');
                }
                break;
            case 'desktop-change-password-btn':
                this.showModal('change-password-modal');
                break;
            case 'desktop-delete-account-btn':
                this.showModal('delete-account-modal');
                break;
            case 'desktop-logout-btn':
                if (this.managers.auth && typeof this.managers.auth.logout === 'function') {
                    this.managers.auth.logout();
                }
                break;
            case 'about-option':
                this.showModal('about-modal');
                break;
            default:
                console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é:', action);
        }
    }

    setupModalCloseButtons() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        const closeButtons = document.querySelectorAll('.auth-modal button[aria-label="–ó–∞–∫—Ä—ã—Ç—å"], .profile-close, .friends-close');

        closeButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                e.preventDefault();
                const modal = button.closest('.auth-modal, .profile-modal, .friends-modal');
                if (modal) {
                    modalManager.hideModal(modal);
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ "–û –ø—Ä–æ–µ–∫—Ç–µ"
        const closeAboutBtn = document.getElementById('close-about');
        if (closeAboutBtn) {
            closeAboutBtn.addEventListener('click', () => {
                const aboutModal = document.getElementById('about-modal');
                if (aboutModal) {
                    modalManager.hideModal(aboutModal);
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        const cancelDeleteBtn = document.getElementById('cancel-delete-account');
        if (cancelDeleteBtn) {
            cancelDeleteBtn.addEventListener('click', () => {
                const deleteModal = document.getElementById('delete-account-modal');
                if (deleteModal) {
                    modalManager.hideModal(deleteModal);
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        const confirmDeleteBtn = document.getElementById('confirm-delete-account');
        if (confirmDeleteBtn) {
            confirmDeleteBtn.addEventListener('click', async (e) => {
                e.preventDefault();
                if (this.managers.user && typeof this.managers.user.deleteAccount === 'function') {
                    await this.managers.user.deleteAccount();
                }
                const deleteModal = document.getElementById('delete-account-modal');
                if (deleteModal && window.modalManager) {
                    window.modalManager.hideModal(deleteModal);
                }
            });
        }
    }

    setupGameSearch() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
        const searchBtn = document.getElementById('search-btn');
        if (searchBtn) {
            searchBtn.addEventListener('click', () => {
                const searchManager = this.managers.search;
                if (searchManager && typeof searchManager.performSearch === 'function') {
                    searchManager.performSearch();
                } else {
                    console.warn('–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
        const clearSearchBtn = document.getElementById('clear-search');
        if (clearSearchBtn) {
            clearSearchBtn.addEventListener('click', () => {
                const searchManager = this.managers.search;
                if (searchManager && typeof searchManager.clearSearch === 'function') {
                    searchManager.clearSearch();
                } else {
                    console.warn('–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ (Enter)
        const searchInput = document.getElementById('game-search');
        if (searchInput) {
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    const searchManager = this.managers.search;
                    if (searchManager && typeof searchManager.performSearch === 'function') {
                        searchManager.performSearch();
                    }
                }
            });
        }
    }

    setupSupportForm() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É
        const submitSupportBtn = document.getElementById('submit-support-ticket');
        if (submitSupportBtn) {
            submitSupportBtn.addEventListener('click', (e) => {
                e.preventDefault();
                const supportManager = this.managers.support;
                if (supportManager && typeof supportManager.submitSupportTicket === 'function') {
                    supportManager.submitSupportTicket();
                } else {
                    console.warn('–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    if (window.toastManager) {
                        window.toastManager.error('–§—É–Ω–∫—Ü–∏—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                    }
                }
            });
        }
    }

    setupNotificationButtons() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const notificationHistoryBtn = document.getElementById('notification-history-btn');
        if (notificationHistoryBtn) {
            notificationHistoryBtn.addEventListener('click', () => {
                const notificationModal = document.getElementById('notification-history-modal');
                if (notificationModal) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
                    if (notificationModal.classList.contains('hidden')) {
                        notificationModal.classList.remove('hidden');
                        notificationModal.style.display = 'flex';
                    } else {
                        notificationModal.classList.add('hidden');
                        notificationModal.style.display = 'none';
                    }
                    
                    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    if (window.toastManager && typeof window.toastManager.loadNotificationHistory === 'function') {
                        window.toastManager.loadNotificationHistory();
                    }
                    
                    console.log('üîî –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ');
                } else {
                    console.warn('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                }
            });
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        } else {
            console.warn('‚ùå –ö–Ω–æ–ø–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
    
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const clearNotificationsBtn = document.getElementById('clear-notifications');
        if (clearNotificationsBtn) {
            clearNotificationsBtn.addEventListener('click', () => {
                if (window.toastManager && typeof window.toastManager.clearNotificationHistory === 'function') {
                    window.toastManager.clearNotificationHistory();
                }
            });
        }
    
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∫–ª–∏–∫–µ —Å–Ω–∞—Ä—É–∂–∏
        const notificationModal = document.getElementById('notification-history-modal');
        if (notificationModal) {
            notificationModal.addEventListener('click', (e) => {
                if (e.target === notificationModal) {
                    notificationModal.classList.add('hidden');
                    notificationModal.style.display = 'none';
                }
            });
        }
    }

    handleAuthButtonClick(button) {
        const id = button.id;
        const actions = {
            login: () => this.showAuthModal('login'),
            register: () => this.showAuthModal('register'),
            logout: () => this.managers.auth.logout(),
            profile: () => this.showModal('profile-modal'),
            friends: () => this.showModal('friends-modal'),
            about: () => this.showModal('about-modal'),
        };

        for (const [key, action] of Object.entries(actions)) {
            if (id.includes(key)) {
                action();
                break;
            }
        }
    }

    showAuthModal(mode) {
        const modal = document.getElementById('auth-modal');
        if (modal) {
            modalManager.showModal(modal, { mode: mode }); // –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∂–∏–º
        } else {
            console.warn('auth-modal –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            if (window.toastManager) {
                window.toastManager.error('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
            }
        }
    }

    showModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modalManager.showModal(modal);
        } else {
            console.warn(`${modalId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            if (window.toastManager) {
                window.toastManager.error(`–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "${modalId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
            }
        }
    }

    setupNavigationButtons() {
        const navButtons = document.querySelectorAll('nav button:not(.burger-menu-button)');
        navButtons.forEach(btn => {
            if (btn.id === 'home-nav-btn' || btn.id === 'all-games-nav-btn' || btn.id === 'news-nav-btn') return;
            if (btn) {
                Utils.addEventListenerSafe(btn, 'click', () => {
                    if (window.toastManager) {
                        window.toastManager.info('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                    }
                });
            }
        });

        // SPA-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤–æ—Å—Ç–∏'
        const newsBtn = document.getElementById('news-nav-btn');
        const homeBtn = document.getElementById('home-nav-btn');
        const mainContent = document.querySelector('main');
        const newsPage = document.getElementById('news-page');
        const footer = document.querySelector('footer');
        if (newsBtn && newsPage && mainContent && footer) {
            Utils.addEventListenerSafe(newsBtn, 'click', (e) => {
                e.preventDefault();
                mainContent.classList.add('hidden');
                footer.classList.add('hidden');
                newsPage.classList.remove('hidden');
            });
        }
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–∞—è' ‚Äî –≤—ã—Ö–æ–¥ –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
        if (homeBtn && newsPage && mainContent && footer) {
            Utils.addEventListenerSafe(homeBtn, 'click', (e) => {
                if (!newsPage.classList.contains('hidden')) {
                    newsPage.classList.add('hidden');
                    mainContent.classList.remove('hidden');
                    footer.classList.remove('hidden');
                    footer.style.display = '';
                }
            });
        }
    }

    setupFooterElements() {
        const footerButtons = document.querySelectorAll('footer button');
        footerButtons.forEach(btn => {
            if (btn) {
                Utils.addEventListenerSafe(btn, 'click', () => {
                    if (window.toastManager) {
                        window.toastManager.info('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                    }
                });
            }
        });

        const footerLinks = document.querySelectorAll('footer a[href="#"]');
        footerLinks.forEach(link => {
            if (link) {
                Utils.addEventListenerSafe(link, (e) => {
                    e.preventDefault();
                    if (window.toastManager) {
                        window.toastManager.info('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                    }
                });
            }
        });

        const allNewsBtn = document.querySelector('main .text-center button');
        if (allNewsBtn) {
            Utils.addEventListenerSafe(allNewsBtn, 'click', () => {
                if (window.toastManager) {
                    window.toastManager.info('–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                }
            });
        }
    }

    async loadInitialContent() {
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
            const contentLoader = this.managers.content;
            if (contentLoader) {
                await contentLoader.loadInitialGames();
                console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
            } else {
                console.warn('ContentLoader –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
            // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç.');
        }
    }

    updateUIForUserState() {
        try {
            const currentUser = this.managers.auth.getCurrentUser();
            if (currentUser) {
                this.showLoggedInUI(currentUser);
            } else {
                this.showLoggedOutUI();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    }

    showLoggedInUI(user) {
        this.updateUIElements({
            loginButtonsVisible: false,
            profileElementsVisible: true,
            burgerMenuVisible: true // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
        });
        const profileBtn = document.getElementById('desktop-profile-btn');
        if (profileBtn) {
            profileBtn.textContent = user.username || '–ü—Ä–æ—Ñ–∏–ª—å';
        }
    }

    showLoggedOutUI() {
        this.updateUIElements({
            loginButtonsVisible: true,
            profileElementsVisible: false,
            burgerMenuVisible: false // –°–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
        });
    }

    updateUIElements({ loginButtonsVisible, profileElementsVisible, burgerMenuVisible }) {
        this.toggleElementsVisibility('#desktop-login-btn, #desktop-register-btn', loginButtonsVisible);
        this.toggleElementsVisibility('#desktop-profile-btn', profileElementsVisible);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ/—Å–∫—Ä—ã—Ç–∏–µ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
        const burgerMenu = document.querySelector('.burger-menu');
        if (burgerMenu) {
            burgerMenu.style.display = burgerMenuVisible ? 'block' : 'none';
        }
    }

    toggleElementsVisibility(selectors, isVisible) {
        const elements = document.querySelectorAll(selectors);
        elements.forEach(element => {
            if (element) {
                element.style.display = isVisible ? 'block' : 'none';
            }
        });
    }

    hideLoadingScreen() {
        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –æ–±–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                loadingScreen.classList.add('hidden');
                document.body.classList.add('loaded');

                // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                const header = document.querySelector('header');
                const main = document.querySelector('main');
                const footer = document.querySelector('footer');

                if (header) {
                    header.classList.remove('content-hidden');
                    header.classList.add('content-visible');
                }
                if (main) {
                    main.classList.remove('content-hidden');
                    main.classList.add('content-visible');
                }
                if (footer) {
                    footer.classList.remove('content-hidden');
                    footer.classList.add('content-visible');
                }
            }, 2000); // –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ (0.7s + 0.5s + –∑–∞–ø–∞—Å)
        }
    }

    showBrowserWarning(message) {
        if (window.toastManager && typeof window.toastManager.warning === 'function') {
            window.toastManager.warning(message);
        } else {
            alert(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${message}`);
        }
    }

    showError(message) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', message);
        if (window.toastManager) {
            window.toastManager.error(message);
        }
    }

    cleanup() {
        try {
            if (window.gameHubDataManager && typeof window.gameHubDataManager.saveData === 'function') {
                window.gameHubDataManager.saveData();
            } else {
                console.warn('DataManager –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –º–µ—Ç–æ–¥ saveData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—á–∏—Å—Ç–∫–∏:', error);
        }
    }

    setupManagersInGlobalScope() {
        try {
            Object.entries(this.managers).forEach(([name, manager]) => {
                if (manager) {
                    window.managers[name] = manager;
                } else {
                    console.warn(`–ú–µ–Ω–µ–¥–∂–µ—Ä ${name} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.`);
                }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏:', error);
        }
    }

    setupPasswordVisibilityToggles() {
        // –î–ª—è —Ñ–æ—Ä–º—ã —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è ‚Äî –æ–¥–Ω–∞ –æ–±—â–∞—è –∫–Ω–æ–ø–∫–∞
        const allPasswordsBtn = document.getElementById('toggle-all-passwords-visibility');
        const currentPassword = document.getElementById('current-password');
        const newPassword = document.getElementById('new-password');
        const confirmNewPassword = document.getElementById('confirm-new-password');
        if (allPasswordsBtn && currentPassword && newPassword && confirmNewPassword) {
            allPasswordsBtn.addEventListener('click', () => {
                const isVisible = currentPassword.type === 'text' && newPassword.type === 'text' && confirmNewPassword.type === 'text';
                const newType = isVisible ? 'password' : 'text';
                currentPassword.type = newType;
                newPassword.type = newType;
                confirmNewPassword.type = newType;
                allPasswordsBtn.textContent = isVisible ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª–∏' : '–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª–∏';
            });
        }
        // –î–ª—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        const loginPassword = document.getElementById('login-password');
        const toggleLoginPassword = document.getElementById('toggle-login-password-visibility');
        if (loginPassword && toggleLoginPassword) {
            toggleLoginPassword.addEventListener('click', () => {
                const isVisible = loginPassword.type === 'text';
                loginPassword.type = isVisible ? 'password' : 'text';
                toggleLoginPassword.textContent = isVisible ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å' : '–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å';
            });
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
document.addEventListener('DOMContentLoaded', () => {
    const app = new GameHubApp();
    app.init().catch(error => {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å GameHub:', error);
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export { GameHubApp };

// –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä –≤ —Å—Ç–∏–ª–µ Microsoft Store
window.addEventListener('DOMContentLoaded', () => {
    fetch('games.json')
        .then(response => response.json())
        .then(games => {
            // –ì–ª–∞–≤–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä (5 –∏–≥—Ä)
            const mainSliderGames = games.slice(0, 5);
            // –ë–æ–∫–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (3 –∏–≥—Ä—ã)
            const sideSliderGames = games.slice(5, 8);
            // –°–µ—Ç–∫–∞ (10 –∏–≥—Ä)
            const gridGames = games.slice(8, 18);

            // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            const initCarousel = () => {
                if (window.managers && window.managers.carousel) {
                    window.managers.carousel.setGames(mainSliderGames);
                    console.log('üé† –ö–∞—Ä—É—Å–µ–ª—å –∏–≥—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                } else {
                    setTimeout(initCarousel, 100);
                }
            };
            initCarousel();

            // –†–µ–Ω–¥–µ—Ä–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ ContentLoader
            const renderOtherSections = () => {
                if (window.managers && window.managers.content) {
                    window.managers.content.renderSideSliderCards(sideSliderGames);
                    window.managers.content.renderGamesGrid(gridGames);
                    console.log('üì± –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω—ã');
                } else {
                    setTimeout(renderOtherSections, 100);
                }
            };
            renderOtherSections();
        });
});

// === –ß–∏—Å—Ç–∞—è SPA-–ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≥–ª–∞–≤–Ω–æ–π ===
document.addEventListener('DOMContentLoaded', () => {
    const newsBtn = document.getElementById('news-nav-btn');
    const homeBtn = document.getElementById('home-nav-btn');
    const allGamesBtn = document.getElementById('all-games-nav-btn');
    const mainContent = document.querySelector('main');
    const newsPage = document.getElementById('news-page');
    const newsListPage = document.getElementById('news-list-page');

    // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∫—Ä–æ–ª–ª –¥–ª—è –≤—Å–µ—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    [newsBtn, homeBtn, allGamesBtn].forEach(btn => {
        if (btn) {
            btn.addEventListener('click', e => e.preventDefault());
        }
    });

    const newsData = [
        {
            id: 'news-001',
            image: 'https://cdn.cloudflare.steamstatic.com/steam/apps/4500/header.jpg',
            date: '2024-06-13T10:00:00Z',
            title: '–£–∑–Ω–∞–π—Ç–µ, —Å —á–µ–≥–æ –≤—Å—ë –Ω–∞—á–∏–Ω–∞–ª–æ—Å—å, –≤ S.T.A.L.K.E.R.: Legends of the Zone Trilogy',
            description: '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–∏–ª–æ–≥–∏—è GSC Game World –∏ –≤ 2025 —á—É–≤—Å—Ç–≤—É–µ—Ç—Å—è –ø–æ—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ —Å–≤–µ–∂–µ–π ‚Äî –ø–æ—Ç–æ–º—É —á—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–≤–µ—Ä—è—é—Ç –∏–≥—Ä–æ–∫–∞–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å –µ—ë —Ç–∞–π–Ω—ã',
            link: '#'
        },
        {
            id: 'news-002',
            image: 'https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=400&q=80',
            date: '2024-06-08T12:00:00Z',
            title: '–í—ã—à–µ–ª —Ñ–∏–ª—å–º ¬´28 –ª–µ—Ç —Å–ø—É—Å—Ç—è¬ª. –í —ç—Ç–æ–π –ø–æ–¥–±–æ—Ä–∫–µ –≤–∞—Å –∂–¥—É—Ç –ª—É—á—à–∏–µ –∏–≥—Ä—ã –æ –∂–∏–≤—ã—Ö –º–µ—Ä—Ç–≤–µ—Ü–∞—Ö, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –ø—Ä–∞–≤–∏–ª–∞–º –∑–æ–º–±–∏-–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å–∞',
            description: '–í –∏–≥—Ä–∞—Ö –≤–æ—Å—Å—Ç–∞–Ω–∏–µ –∑–æ–º–±–∏ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ —Å —Ç—ã—Å—è—á–∏ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω, –Ω–æ —É –≤—Å–µ—Ö —ç—Ç–∏—Ö –∏—Å—Ç–æ—Ä–∏–π –µ—Å—Ç—å –∫–æ–µ-—á—Ç–æ –æ–±—â–µ–µ',
            link: '#'
        },
        {
            id: 'news-003',
            image: 'https://cdn.cloudflare.steamstatic.com/steam/apps/1232170/header.jpg',
            date: '2024-06-07T09:00:00Z',
            title: '–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ Doodle God: Infinite Alchemy Merge –¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤ Epic Games Store –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
            description: '–°–æ–∑–¥–∞–π—Ç–µ –º–∏—Ä —Å –Ω—É–ª—è.',
            link: '#'
        }
    ];

    function formatNewsDate(dateStr) {
        const date = new Date(dateStr);
        return date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' });
    }

    function renderNewsItem(news) {
        return `
            <div class="flex gap-6 items-start bg-[#23272f] rounded-lg p-4">
                <img src="${news.image}" alt="${news.title}" class="w-40 h-24 object-cover rounded-lg flex-shrink-0">
                <div class="flex-1">
                    <div class="text-xs text-gray-400 mb-1">${formatNewsDate(news.date)}</div>
                    <div class="font-bold text-lg text-white mb-2">${news.title}</div>
                    <div class="text-gray-300 text-sm mb-2">${news.description}</div>
                    <a href="${news.link}" class="text-blue-400 hover:underline text-sm font-medium">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                </div>
            </div>
        `;
    }

    function renderNewsList() {
        newsListPage.innerHTML = newsData.map(renderNewsItem).join('');
    }

    if (newsBtn && homeBtn && mainContent && newsPage && newsListPage) {
        newsBtn.onclick = (e) => {
            e.preventDefault();
            mainContent.classList.add('hidden');
            newsPage.classList.remove('hidden');
            renderNewsList();
        };
        homeBtn.onclick = (e) => {
            e.preventDefault();
            newsPage.classList.add('hidden');
            mainContent.classList.remove('hidden');
        };
        if (allGamesBtn) {
            allGamesBtn.onclick = (e) => {
                e.preventDefault();
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–ª—É—à–∫—É –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º
            };
        }
    }
});