/**
 * Data Manager - –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏, —Ç–∞–∫ –∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∞–π—Ç–µ.
 * –í —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ —É–¥–∞–ª–µ–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç localStorage –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ö–æ—Å—Ç–∏–Ω–≥—É.
 * –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ.
 */
export class DataManager {
    constructor() {
        this.users = [];
        this.games = [];
        this.news = [];
        this.supportTickets = [];
        console.log('DataManager: In-memory data store initialized.');
    }

    loadData() {
        // –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏, –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    }

    saveData() {
        // –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        this.notifyDataChange();
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    notifyDataChange() {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if (typeof window !== 'undefined') {
            window.dispatchEvent(new CustomEvent('dataChanged', {
                detail: { timestamp: Date.now() }
            }));
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    getUsers() {
        return this.users;
    }

    getUserById(id) {
        return this.users.find(user => user.id === id);
    }

    addUser(user) {
        user.id = Date.now().toString();
        user.createdAt = new Date().toISOString();
        user.status = 'active';
        this.users.push(user);
        this.saveData();
        return user;
    }

    updateUser(id, updates) {
        const userIndex = this.users.findIndex(user => user.id === id);
        if (userIndex !== -1) {
            this.users[userIndex] = { ...this.users[userIndex], ...updates };
            this.saveData();
            return true;
        }
        return false;
    }

    deleteUser(id) {
        const userIndex = this.users.findIndex(user => user.id === id);
        if (userIndex !== -1) {
            this.users.splice(userIndex, 1);
            this.saveData();
            return true;
        }
        return false;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–∞–º–∏
    getGames() {
        return this.games;
    }

    getGameById(id) {
        return this.games.find(game => game.id === id);
    }

    addGame(game) {
        game.id = Date.now().toString();
        game.createdAt = new Date().toISOString();
        this.games.push(game);
        this.saveData();
        return game;
    }

    updateGame(id, updates) {
        const gameIndex = this.games.findIndex(game => game.id === id);
        if (gameIndex !== -1) {
            this.games[gameIndex] = { ...this.games[gameIndex], ...updates };
            this.saveData();
            return true;
        }
        return false;
    }

    deleteGame(id) {
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã —Å ID:', id);
        console.log('üìã –¢–µ–∫—É—â–∏–µ –∏–≥—Ä—ã:', this.games.map(g => ({ id: g.id, title: g.title })));

        const gameIndex = this.games.findIndex(game => game.id === id);
        console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å:', gameIndex);

        if (gameIndex !== -1) {
            this.games.splice(gameIndex, 1);
            this.saveData();
            console.log('‚úÖ –ò–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä:', this.games.length);
            return true;
        }
        console.log('‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return false;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É —Ä—É—Å—Å–∫–æ–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π
    switchKeyboardLayout(str) {
        const en = 'qwertyuiop[]asdfghjkl;zxcvbnm,.';
        const ru = '–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é';
        let result = '';
        for (let char of str) {
            const lowerChar = char.toLowerCase();
            let idx = en.indexOf(lowerChar);
            if (idx !== -1) {
                result += ru[idx];
            } else {
                idx = ru.indexOf(lowerChar);
                if (idx !== -1) {
                    result += en[idx];
                } else {
                    result += char;
                }
            }
        }
        return result;
    }

    searchGames(query, filter = 'all') {
        if (!query) return this.games;
        const lowerQuery = query.toLowerCase();
        const altQuery = this.switchKeyboardLayout(lowerQuery);
        return this.games.filter(game => {
            const title = (game.title || '').toLowerCase();
            const desc = (game.description || '').toLowerCase();
            const titleAlt = this.switchKeyboardLayout(title);
            const descAlt = this.switchKeyboardLayout(desc);
            return (
                title.includes(lowerQuery) ||
                desc.includes(lowerQuery) ||
                title.includes(altQuery) ||
                desc.includes(altQuery) ||
                titleAlt.includes(lowerQuery) ||
                descAlt.includes(lowerQuery)
            );
        });
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
    getNews() {
        return this.news;
    }

    getNewsById(id) {
        return this.news.find(news => news.id === id);
    }

    addNews(newsItem) {
        newsItem.id = Date.now().toString();
        newsItem.createdAt = new Date().toISOString();
        newsItem.author = newsItem.author || 'admin';
        this.news.push(newsItem);
        this.saveData();
        return newsItem;
    }

    updateNews(id, updates) {
        const newsIndex = this.news.findIndex(item => item.id === id);
        if (newsIndex !== -1) {
            this.news[newsIndex] = { ...this.news[newsIndex], ...updates };
            this.saveData();
            return true;
        }
        return false;
    }

    deleteNews(id) {
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å ID:', id);
        console.log('üìã –¢–µ–∫—É—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:', this.news.map(n => ({ id: n.id, title: n.title })));

        const newsIndex = this.news.findIndex(news => news.id === id);
        console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å:', newsIndex);

        if (newsIndex !== -1) {
            this.news.splice(newsIndex, 1);
            this.saveData();
            console.log('‚úÖ –ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–ª–æ—Å—å –Ω–æ–≤–æ—Å—Ç–µ–π:', this.news.length);
            return true;
        }
        console.log('‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return false;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    getSupportTickets() {
        return this.supportTickets;
    }

    getSupportTicketById(id) {
        return this.supportTickets.find(ticket => ticket.id === id);
    }

    addSupportTicket(ticket) {
        ticket.id = Date.now().toString();
        ticket.createdAt = new Date().toISOString();
        ticket.status = 'open';
        ticket.responses = [];
        this.supportTickets.push(ticket);
        this.saveData();
        return ticket;
    }

    addSupportResponse(ticketId, response) {
        const ticket = this.supportTickets.find(t => t.id === ticketId);
        if (ticket) {
            if (!ticket.responses) ticket.responses = [];
            ticket.responses.push({
                id: Date.now().toString(),
                message: response,
                isAdmin: true,
                createdAt: new Date().toISOString()
            });
            ticket.status = 'resolved';
            this.saveData();
            return true;
        }
        return false;
    }

    updateTicketStatus(ticketId, status) {
        const ticket = this.supportTickets.find(t => t.id === ticketId);
        if (ticket) {
            ticket.status = status;
            this.saveData();
            return true;
        }
        return false;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getStats() {
        return {
            totalUsers: this.users.length,
            activeUsers: this.users.filter(u => u.status !== 'blocked').length,
            blockedUsers: this.users.filter(u => u.status === 'blocked').length,
            totalGames: this.games.length,
            totalNews: this.news.length,
            openTickets: this.supportTickets.filter(t => t.status === 'open').length,
            resolvedTickets: this.supportTickets.filter(t => t.status === 'resolved').length
        };
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω, —Ç.–∫. –¥–∞–Ω–Ω—ã–µ –∏ —Ç–∞–∫ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
}